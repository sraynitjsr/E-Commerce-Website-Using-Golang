// Code generated by goa v3.11.1, DO NOT EDIT.
//
// calc HTTP server
//
// Command:
// $ goa gen github.com/sraynitjsr/design

package server

import (
	"context"
	"net/http"

	calc "github.com/sraynitjsr/gen/calc"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the calc service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	Add                 http.Handler
	Sub                 http.Handler
	Multiply            http.Handler
	Divide              http.Handler
	GenHTTPOpenapi1JSON http.Handler
	GenHTTPOpenapi2JSON http.Handler
	GenHTTPOpenapi3JSON http.Handler
	GenHTTPOpenapi4JSON http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the calc service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *calc.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi1JSON http.FileSystem,
	fileSystemGenHTTPOpenapi2JSON http.FileSystem,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
	fileSystemGenHTTPOpenapi4JSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi1JSON == nil {
		fileSystemGenHTTPOpenapi1JSON = http.Dir(".")
	}
	if fileSystemGenHTTPOpenapi2JSON == nil {
		fileSystemGenHTTPOpenapi2JSON = http.Dir(".")
	}
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	if fileSystemGenHTTPOpenapi4JSON == nil {
		fileSystemGenHTTPOpenapi4JSON = http.Dir(".")
	}
	return &Server{
		Mounts: []*MountPoint{
			{"Add", "GET", "/add/{a}/{b}"},
			{"Sub", "GET", "/sub/{a}/{b}"},
			{"Multiply", "GET", "/multiply/{a}/{b}"},
			{"Divide", "GET", "/divide/{a}/{b}"},
			{"./gen/http/openapi1.json", "GET", "/openapi1.json"},
			{"./gen/http/openapi2.json", "GET", "/openapi2.json"},
			{"./gen/http/openapi3.json", "GET", "/openapi3.json"},
			{"./gen/http/openapi4.json", "GET", "/openapi4.json"},
		},
		Add:                 NewAddHandler(e.Add, mux, decoder, encoder, errhandler, formatter),
		Sub:                 NewSubHandler(e.Sub, mux, decoder, encoder, errhandler, formatter),
		Multiply:            NewMultiplyHandler(e.Multiply, mux, decoder, encoder, errhandler, formatter),
		Divide:              NewDivideHandler(e.Divide, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi1JSON: http.FileServer(fileSystemGenHTTPOpenapi1JSON),
		GenHTTPOpenapi2JSON: http.FileServer(fileSystemGenHTTPOpenapi2JSON),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
		GenHTTPOpenapi4JSON: http.FileServer(fileSystemGenHTTPOpenapi4JSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "calc" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Add = m(s.Add)
	s.Sub = m(s.Sub)
	s.Multiply = m(s.Multiply)
	s.Divide = m(s.Divide)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return calc.MethodNames[:] }

// Mount configures the mux to serve the calc endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAddHandler(mux, h.Add)
	MountSubHandler(mux, h.Sub)
	MountMultiplyHandler(mux, h.Multiply)
	MountDivideHandler(mux, h.Divide)
	MountGenHTTPOpenapi1JSON(mux, goahttp.Replace("", "/./gen/http/openapi1.json", h.GenHTTPOpenapi1JSON))
	MountGenHTTPOpenapi2JSON(mux, goahttp.Replace("", "/./gen/http/openapi2.json", h.GenHTTPOpenapi2JSON))
	MountGenHTTPOpenapi3JSON(mux, goahttp.Replace("", "/./gen/http/openapi3.json", h.GenHTTPOpenapi3JSON))
	MountGenHTTPOpenapi4JSON(mux, goahttp.Replace("", "/./gen/http/openapi4.json", h.GenHTTPOpenapi4JSON))
}

// Mount configures the mux to serve the calc endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountAddHandler configures the mux to serve the "calc" service "add"
// endpoint.
func MountAddHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/add/{a}/{b}", f)
}

// NewAddHandler creates a HTTP handler which loads the HTTP request and calls
// the "calc" service "add" endpoint.
func NewAddHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddRequest(mux, decoder)
		encodeResponse = EncodeAddResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "add")
		ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSubHandler configures the mux to serve the "calc" service "sub"
// endpoint.
func MountSubHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sub/{a}/{b}", f)
}

// NewSubHandler creates a HTTP handler which loads the HTTP request and calls
// the "calc" service "sub" endpoint.
func NewSubHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSubRequest(mux, decoder)
		encodeResponse = EncodeSubResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sub")
		ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMultiplyHandler configures the mux to serve the "calc" service
// "multiply" endpoint.
func MountMultiplyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/multiply/{a}/{b}", f)
}

// NewMultiplyHandler creates a HTTP handler which loads the HTTP request and
// calls the "calc" service "multiply" endpoint.
func NewMultiplyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMultiplyRequest(mux, decoder)
		encodeResponse = EncodeMultiplyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "multiply")
		ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDivideHandler configures the mux to serve the "calc" service "divide"
// endpoint.
func MountDivideHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/divide/{a}/{b}", f)
}

// NewDivideHandler creates a HTTP handler which loads the HTTP request and
// calls the "calc" service "divide" endpoint.
func NewDivideHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDivideRequest(mux, decoder)
		encodeResponse = EncodeDivideResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "divide")
		ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapi1JSON configures the mux to serve GET request made to
// "/openapi1.json".
func MountGenHTTPOpenapi1JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi1.json", h.ServeHTTP)
}

// MountGenHTTPOpenapi2JSON configures the mux to serve GET request made to
// "/openapi2.json".
func MountGenHTTPOpenapi2JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi2.json", h.ServeHTTP)
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi3.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi3.json", h.ServeHTTP)
}

// MountGenHTTPOpenapi4JSON configures the mux to serve GET request made to
// "/openapi4.json".
func MountGenHTTPOpenapi4JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi4.json", h.ServeHTTP)
}
