// Code generated by goa v3.11.1, DO NOT EDIT.
//
// calc gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/sraynitjsr/design

package server

import (
	"context"

	calc "github.com/sraynitjsr/gen/calc"
	calcpb "github.com/sraynitjsr/gen/grpc/calc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeAddResponse encodes responses from the "calc" service "add" endpoint.
func EncodeAddResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "add", "int", v)
	}
	resp := NewProtoAddResponse(result)
	return resp, nil
}

// DecodeAddRequest decodes requests sent to "calc" service "add" endpoint.
func DecodeAddRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.AddRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.AddRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "add", "*calcpb.AddRequest", v)
		}
	}
	var payload *calc.AddPayload
	{
		payload = NewAddPayload(message)
	}
	return payload, nil
}

// EncodeSubResponse encodes responses from the "calc" service "sub" endpoint.
func EncodeSubResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "sub", "int", v)
	}
	resp := NewProtoSubResponse(result)
	return resp, nil
}

// DecodeSubRequest decodes requests sent to "calc" service "sub" endpoint.
func DecodeSubRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.SubRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.SubRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "sub", "*calcpb.SubRequest", v)
		}
	}
	var payload *calc.SubPayload
	{
		payload = NewSubPayload(message)
	}
	return payload, nil
}

// EncodeMultiplyResponse encodes responses from the "calc" service "multiply"
// endpoint.
func EncodeMultiplyResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "multiply", "int", v)
	}
	resp := NewProtoMultiplyResponse(result)
	return resp, nil
}

// DecodeMultiplyRequest decodes requests sent to "calc" service "multiply"
// endpoint.
func DecodeMultiplyRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.MultiplyRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.MultiplyRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "multiply", "*calcpb.MultiplyRequest", v)
		}
	}
	var payload *calc.MultiplyPayload
	{
		payload = NewMultiplyPayload(message)
	}
	return payload, nil
}

// EncodeDivideResponse encodes responses from the "calc" service "divide"
// endpoint.
func EncodeDivideResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "divide", "int", v)
	}
	resp := NewProtoDivideResponse(result)
	return resp, nil
}

// DecodeDivideRequest decodes requests sent to "calc" service "divide"
// endpoint.
func DecodeDivideRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *calcpb.DivideRequest
		ok      bool
	)
	{
		if message, ok = v.(*calcpb.DivideRequest); !ok {
			return nil, goagrpc.ErrInvalidType("calc", "divide", "*calcpb.DivideRequest", v)
		}
	}
	var payload *calc.DividePayload
	{
		payload = NewDividePayload(message)
	}
	return payload, nil
}
